# ROZDZIAŁ 3: ZASTOSOWANE TECHNOLOGIE I ARCHITEKTURA APLIKACJI

Wybór odpowiednich technologii oraz przemyślana architektura stanowią fundament skutecznego i elastycznego systemu informatycznego. W niniejszym rozdziale przedstawiono kluczowe technologie wykorzystane podczas implementacji aplikacji wspomagającej podejmowanie decyzji oraz opisano jej architekturę, ze szczególnym uwzględnieniem struktury modułowej i przepływu danych.

## 3.1 Technologie Front-endowe

Aplikacja została zrealizowana jako Single Page Application (SPA), co oznacza, że większość logiki interfejsu użytkownika oraz interakcji odbywa się po stronie klienta (w przeglądarce internetowej). Taki model zapewnia płynne przejścia między widokami oraz szybką odpowiedź na działania użytkownika.

### 3.1.1 HTML5 (HyperText Markup Language 5)

HTML5, jako najnowszy standard języka znaczników, posłużył do zdefiniowania semantycznej struktury wszystkich widoków i komponentów aplikacji. Wykorzystano jego elementy do budowy formularzy wprowadzania danych dla modułów AHP, Problemu Rozkroju i Optymalizacji Produkcji, a także do organizacji przestrzeni dla dynamicznie generowanych treści, takich jak tabele wyników, wykresy czy komunikaty dla użytkownika. Szczególną uwagę zwrócono na poprawność semantyczną kodu w celu zapewnienia lepszej dostępności (a11y) i ułatwienia indeksowania przez roboty wyszukiwarek (choć to drugie ma mniejsze znaczenie dla aplikacji tego typu).

### 3.1.2 CSS3 (Cascading Style Sheets 3)

Za warstwę wizualną aplikacji odpowiada CSS3. Wykorzystano jego zaawansowane możliwości do stworzenia estetycznego, spójnego i responsywnego interfejsu użytkownika. Kluczowe zastosowania CSS3 w projekcie to:
*   **Zmienne CSS (Custom Properties):** Umożliwiły zdefiniowanie globalnej palety kolorów (np. `var(--dark-brown)`, `var(--light-brown)`) i innych parametrów stylistycznych, co ułatwiło utrzymanie spójności wizualnej oraz ewentualne przyszłe modyfikacje wyglądu (np. implementacja motywów).
*   **Flexbox i CSS Grid:** Te nowoczesne moduły layoutu zostały użyte do tworzenia elastycznych i adaptacyjnych układów komponentów, zapewniając prawidłowe wyświetlanie na różnych rozmiarach ekranów.
*   **Media Queries:** Zastosowano je w celu implementacji responsywnego projektowania (RWD), dostosowując układ i wygląd poszczególnych elementów do szerokości okna przeglądarki, ze szczególnym uwzględnieniem urządzeń mobilnych.
*   **Animacje i Przejścia (Animations & Transitions):** Subtelne animacje i przejścia zostały użyte do poprawy doświadczenia użytkownika (UX), np. przy pojawianiu się komunikatów (toastów), rozwijaniu sekcji czy sygnalizowaniu aktywności przycisków.
*   **Stylizacja Formularzy:** Nadano niestandardowy wygląd elementom formularzy (pola tekstowe, przyciski, selektory), aby pasowały do ogólnego designu aplikacji.
*   **Gradienty i Cienie:** Wykorzystano je do dodania głębi interfejsowi oraz, jak w przypadku skali AHP, do wizualnego rozróżnienia opcji.

### 3.1.3 JavaScript (ECMAScript 6+)

JavaScript jest głównym językiem programowania logiki aplikacji po stronie klienta. W projekcie wykorzystano standard ECMAScript 6 (ES6) i nowsze, co pozwoliło na użycie nowoczesnych konstrukcji językowych usprawniających tworzenie i utrzymanie kodu:
*   **Moduły JavaScript (ES6 Modules):** Kod aplikacji został podzielony na logiczne moduły (pliki `.js`), co znacząco poprawiło organizację, czytelność i reużywalność kodu. Każdy główny komponent aplikacji (AHP, Optymalizacja Produkcji, Problem Rozkroju) oraz funkcje pomocnicze (obsługa linków, logowanie, narzędzia UI) zostały wydzielone do osobnych modułów.
*   **Funkcje Strzałkowe (Arrow Functions):** Stosowane dla zwięzłości i poprawy czytelności, szczególnie w funkcjach zwrotnych.
*   **Klasy (Classes):** Choć JavaScript jest językiem prototypowym, składnia klas ES6 została wykorzystana do zdefiniowania struktur głównych obiektów zarządzających poszczególnymi modułami (np. `AHP`, `ProductionOpt`, `Logger`, `LinkHandler`), co ułatwiło hermetyzację danych i metod.
*   **Destrukturyzacja (Destructuring Assignment):** Używana do łatwiejszego wyciągania wartości z obiektów i tablic.
*   **Szablony Literałów (Template Literals):** Ułatwiły dynamiczne tworzenie fragmentów HTML i komunikatów tekstowych.
*   **Pętle `for...of` oraz metody tablicowe (`map`, `filter`, `reduce`):** Stosowane do efektywnej iteracji i transformacji danych.
*   **Obsługa DOM (Document Object Model):** JavaScript jest intensywnie wykorzystywany do manipulowania strukturą i zawartością dokumentu HTML, dynamicznego tworzenia elementów interfejsu, aktualizacji wyników oraz obsługi zdarzeń generowanych przez użytkownika (kliknięcia, zmiany wartości w polach formularzy itp.).

## 3.2 Wykorzystane Biblioteki Zewnętrzne JavaScript

Aby przyspieszyć rozwój i skorzystać z gotowych, przetestowanych rozwiązań dla specyficznych problemów, w projekcie wykorzystano następujące biblioteki zewnętrzne:

### 3.2.1 Plotly.js

Plotly.js jest potężną biblioteką do tworzenia interaktywnych wykresów i wizualizacji danych. Została wybrana ze względu na:
*   Szeroki wachlarz dostępnych typów wykresów (słupkowe, liniowe, kołowe, radarowe, 3D itp.), co pozwoliło na adekwatną prezentację wyników w różnych modułach.
*   Wysoki stopień interaktywności generowanych wykresów (zoom, pan, wyświetlanie szczegółów po najechaniu myszą).
*   Dobrą dokumentację i aktywne wsparcie społeczności.
*   Możliwość łatwej integracji z aplikacjami webowymi.
W aplikacji Plotly.js jest używane do wizualizacji:
    *   Wyników analizy AHP (np. wykresy wag kryteriów i opcji, wykresy spójności).
    *   Rozwiązań problemu optymalizacji produkcji (np. wykresy przedstawiające optymalne ilości produktów, wykorzystanie zasobów).
    *   Potencjalnie, schematów rozkroju w module CSP.

### 3.2.2 `javascript-lp-solver`

Do rozwiązywania problemów programowania liniowego, stanowiących rdzeń modułu Optymalizacji Produkcji (a potencjalnie także Problemu Rozkroju w pewnych sformułowaniach), wykorzystano bibliotekę `javascript-lp-solver`. Jej wybór podyktowany był:
*   Możliwością implementacji logiki optymalizacyjnej bezpośrednio po stronie klienta, bez konieczności komunikacji z serwerem backendowym dla samego procesu obliczeniowego.
*   Implementacją algorytmu sympleks.
*   Relatywnie prostym API pozwalającym na definiowanie zmiennych decyzyjnych, funkcji celu i ograniczeń.
Biblioteka ta jest kluczowa dla znajdowania optymalnych rozwiązań w problemach maksymalizacji zysku lub minimalizacji kosztów przy zadanych ograniczeniach.

### 3.2.3 (Opcjonalnie) `math.js`

Jeśli biblioteka `math.js` była faktycznie wykorzystywana (np. do zaawansowanych operacji na macierzach w AHP, które nie są natywnie wspierane przez JavaScript lub byłyby trudne do zaimplementowania), należy ją tutaj opisać:
`math.js` to rozbudowana biblioteka matematyczna dla JavaScript, oferująca wsparcie dla operacji na liczbach, macierzach, jednostkach oraz posiadająca wbudowany parser wyrażeń matematycznych. Jej potencjalne zastosowanie w module AHP mogło obejmować:
*   Tworzenie i manipulowanie macierzami porównań parzystych.
*   Obliczanie wektorów własnych i wartości własnych (kluczowe dla wyznaczania wag w AHP).
*   Realizację innych złożonych obliczeń numerycznych.

## 3.3 Architektura Aplikacji

Aplikacja została zaprojektowana w sposób modułowy, aby zapewnić dobrą organizację kodu, łatwość jego utrzymania oraz możliwość niezależnego rozwoju poszczególnych komponentów.

### 3.3.1 Struktura Plików i Modułów

Główne składowe aplikacji zostały podzielone na następujące pliki JavaScript, pełniące rolę modułów:
*   `script.js`: Główny plik sterujący aplikacją, inicjujący poszczególne moduły, obsługujący nawigację między narzędziami (np. funkcja `App.switchToTool`) oraz zarządzający ogólnym stanem aplikacji.
*   `ahp.js` (po refaktoryzacji rozbite na `ahpLogic.js`, `ahpUI.js`, `ahpIO.js`, `ahpExportFile.js`): Moduł(y) odpowiedzialne za całą logikę i interfejs użytkownika metody AHP.
*   `productionOpt.js`: Moduł implementujący logikę i interfejs dla problemu optymalizacji produkcji.
*   `cuttingStock.js`: Moduł dla problemu rozkroju.
*   `linkHandler.js`: Kluczowy moduł odpowiedzialny za generowanie unikalnych linków URL zawierających stan danego narzędzia (dane wejściowe) oraz za importowanie danych z takich linków, co umożliwia współdzielenie i odtwarzanie sesji. Wykorzystuje specjalne separatory (np. `~`, `§`) do kodowania i dekodowania danych.
*   `logger.js`: Moduł dostarczający prosty system logowania zdarzeń w aplikacji (np. `Logger.log()`), z możliwością zapisu logów do pamięci i ich pobierania przez użytkownika, co jest przydatne do debugowania i analizy.
*   `utils.js`: Zbiór funkcji pomocniczych (narzędziowych) wykorzystywanych w różnych częściach aplikacji (np. generowanie komunikatów toast, walidacja danych, sanitacja danych dla solvera jak `Utils.sanitizeForSolver`).

### 3.3.2 Przepływ Danych i Komunikacja Między Modułami

*   **Dane wejściowe** są zbierane z formularzy HTML i przetwarzane przez odpowiednie moduły (`ahp.js`, `productionOpt.js`, `cuttingStock.js`).
*   **Obliczenia** wykonywane są w ramach tych modułów, często z wykorzystaniem bibliotek zewnętrznych (`Plotly.js`, `javascript-lp-solver`).
*   **Wyniki** są prezentowane użytkownikowi poprzez dynamiczną aktualizację DOM (tabele, komunikaty) oraz generowanie wykresów.
*   **Udostępnianie danych:** Moduł `linkHandler.js` współpracuje z każdym modułem narzędziowym (poprzez dedykowane funkcje `exportDataForLink` i `importDataFromLinkString` w tych modułach), aby umożliwić serializację i deserializację ich stanu.
*   **Nawigacja:** `script.js` zarządza przełączaniem widoków (aktywnych narzędzi), ukrywając i pokazując odpowiednie sekcje HTML.

### 3.3.3 Zarządzanie Stanem

Aplikacja nie wykorzystuje rozbudowanej biblioteki do zarządzania stanem (jak Redux czy Vuex). Stan poszczególnych modułów jest zarządzany wewnętrznie przez te moduły (w ich obiektach lub zmiennych). Globalny stan aplikacji (np. aktywne narzędzie) jest kontrolowany przez obiekt `App` w `script.js`.

## 3.4 Środowisko Programistyczne i Kontrola Wersji

*   **Edytor Kodu:** Visual Studio Code.
*   **Przeglądarka Internetowa:** Rozwój i testowanie aplikacji odbywało się głównie w przeglądarce Google Chrome z wykorzystaniem wbudowanych narzędzi deweloperskich (inspektor DOM, konsola JavaScript, debugger).
*   **System Kontroli Wersji:** Cały kod źródłowy projektu zarządzany jest za pomocą systemu kontroli wersji Git. Repozytorium projektu hostowane jest na platformie GitHub, co umożliwia śledzenie zmian, współpracę (w przypadku pracy zespołowej) oraz tworzenie kopii zapasowych kodu. Regularne commity dokumentują postęp prac i wprowadzane modyfikacje.
